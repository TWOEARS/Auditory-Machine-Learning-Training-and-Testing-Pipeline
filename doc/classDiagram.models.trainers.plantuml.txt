@startuml

set namespaceSeparator none


class TwoEarsIdTrainPipe{
  init( sceneCfgs, hrir )
  setTrainset( newTrainFlists )
  setTestset( newTestFlists )
  setupData()
}
TwoEarsIdTrainPipe o-- "pipeline (1)" Core.IdentificationTrainingPipeline: sets up >


class Core.IdentificationTrainingPipeline{
  cacheDirectoryDirSuppl
  cddsUseIdxs
  addModelCreator( trainer )
  resetDataProcs( pipeReUseIdx )
  addDataPipeProc( idProc )
  setTrainData( trainData )
  setTestData( testData )
  run( modelname )
}
Core.IdentificationTrainingPipeline o-- "data (1)" Core.IdentTrainPipeData
Core.IdentificationTrainingPipeline o-- "trainer (1)" ModelTrainers.Base: runs


class Core.IdentTrainPipeData{
  stratificationLabels
  autoStratify
  subsref()
  subsasgn()
  length()
  autoSetStratificationLabels()
  splitInPermutedStratifiedFolds( nFolds, stratifyLabels )
  getDisjunctSubsetIdxs( labels )
  getFilesLabeled( label, labelValue )
  getMinDisjunctSubsetsSize( labels )
  getShare( ratio, stratifyLabels )
  getFileIdx( fileNames )
  saveDataFList( flistName, baseDir )
  loadFileList( flistName, checkFileExistence )
  clear( mode )
  {static} combineData( varargin )
}
Core.IdentTrainPipeData *-- "data (*)" Core.IdentTrainPipeDataElem
Core.IdentTrainPipeData o-- "folds (*)" Core.IdentTrainPipeData


class Core.IdentTrainPipeDataElem{
  fileName
  x
  y
  ysi
  bIdxs
  bacfIdxs
  blockAnnotsCacheFile
  blockAnnotations
  fileAnnotations
  containedIn
  setFileName( fileName )
  addContainers( containers )
  getFileAnnotation( aLabel )
  clear()
  readFileAnnotations()
  {static} addPPtoBas( bas, y )
}


class DataProcs.GatherFeaturesProc{
  sceneCfgDataUseRatio
  sceneCfgPrioDataUseRatio
  selectPrioClass
  prioClass
  dataConverter
  loadBlockAnnotations
  process( wavFilepath)
}
DataProcs.GatherFeaturesProc o-- "dataSelector (1)" DataSelectors.Base
DataProcs.GatherFeaturesProc ..> Core.IdentTrainPipeData: loads feature vectors and labels


abstract class Models.Base{
  featureMask
  trainTime
  testTime
  {static} verbose
  applyModel( x )
  ..
  {abstract} applyModelMasked( x )
  ..
  {static} getPerformance( model, testSet, perfMeasure, maxDataSize, dataSelector, importanceWeighter, getDatapointInfo )
}
Models.Base ..> PerformanceMeasures.Base: produces

Models.Base <|-- Models.DataScalingModel
abstract class Models.DataScalingModel{
  dataTranslators
  dataScalors
  scale2zeroMeanUnitVar( x, saveScalingFactors )
  ..
  {abstract} applyModelToScaledData( x )
}

Models.DataScalingModel <|-- Models.GlmNetModel
class Models.GlmNetModel{
  setLambda( newLambda )
  getCoefImpacts( lambda )
  getBestLambdaCVresults()
  getBestMinStdCVresults()
  getHighestLambdaWithinStdCVresults()
  getLambdasAndNCoefs()
}

Models.Base <|-- Models.RandomForestModel
class Models.RandomForestModel{
  model
  applyModelToScaledData( x )
}

Models.Base <|-- Models.SVMmodel
class Models.SVMmodel{
  useProbModel
  model
  applyModelToScaledData( x )
}

Models.Base <|-- Models.HPSmodel
class Models.HPSmodel{
  hpsSet
  model
  applyModelMasked( x )
}
Models.HPSmodel *-- "model (1) " Models.Base

Models.DataScalingModel <|-- Models.PcaReducedModel
abstract class Models.PcaReducedModel{
  explainedVarianceThreshold
  reduceToPCs( x, setPCs )
  applyModelToScaledData( x )
  {abstract} applyModelToReducedData( x )
}

Models.Base <|-- Models.SvmPcaModel
class Models.SvmPcaModel{
  useProbModel
  model
  applyModelToReducedData( x )
}


abstract class ModelTrainers.Base{
  {static} balMaxData
  {static} featureMask
  maxDataSize
  maxTestDataSize
  setData( trainSet, testSet )
  getModel()
  verbose( newV )
  getPerformance( getDatapointInfo )
  run()
  getPermutedTrainingData()
  ..
  {abstract} buildModel( x, y, iw )
  {abstract} giveTrainedModel()
  {static} getSelectedData( ... )
}
ModelTrainers.Base ..> Models.Base: produces
ModelTrainers.Base o-- "performanceMeasure (1)" PerformanceMeasures.Base
ModelTrainers.Base o-- "trainSet (1), testSet (1)" Core.IdentTrainPipeData
ModelTrainers.Base o-- "dataSelector (1)" DataSelectors.Base
ModelTrainers.Base o-- "importanceWeighter (1)" ImportanceWeighters.Base

ModelTrainers.Base <|-- ModelTrainers.CVtrainer
class ModelTrainers.CVtrainer{
  {static} useParallelComputing
  models
  setNumberOfFolds( nFolds )
  run()
  buildModel()
  getPerformance()
}
ModelTrainers.CVtrainer o-- "trainer (1)" ModelTrainers.Base

ModelTrainers.Base <|-- ModelTrainers.GlmNetLambdaSelectTrainer
class ModelTrainers.GlmNetLambdaSelectTrainer{
  alphas
  family
  nLambda
  hpsMaxDataSize
  cvFolds
  run()
  buildModel()
}
ModelTrainers.GlmNetLambdaSelectTrainer *-- "cvTrainer (1)" ModelTrainers.CVtrainer
ModelTrainers.GlmNetLambdaSelectTrainer *-- "coreTrainer (1)" ModelTrainers.GlmNetTrainer

ModelTrainers.Base <|-- ModelTrainers.GlmNetTrainer
class ModelTrainers.GlmNetTrainer{
  alpha
  family
  nLambda
  lambda
  buildModel( x, y )
}

ModelTrainers.Base <|-- ModelTrainers.HpsTrainer
abstract class ModelTrainers.HpsTrainer{
  hpsSets
  hpsRefineStages
  hpsSearchBudget
  hpsCvFolds
  hpsMaxDataSize
  finalMaxDataSize
  run()
  ..
  {abstract} getHpsGridSearchSets()
  {abstract} getHpsRandomSearchSets()
  {abstract} refineGridTrainer( hps )
}
ModelTrainers.HpsTrainer *-- "hpsCVtrainer (1)" ModelTrainers.CVtrainer
ModelTrainers.HpsTrainer *-- "coreTrainer (1)" ModelTrainers.Base
ModelTrainers.HpsTrainer ..> Models.HPSmodel: produces

ModelTrainers.Base <|-- ModelTrainers.LoadModelNoopTrainer
class ModelTrainers.LoadModelNoopTrainer{
  model
  modelParams
  buildModel( x, y )
  giveTrainedModel()
}

ModelTrainers.HpsTrainer <|-- ModelTrainers.SVMmodelSelectTrainer
class ModelTrainers.SVMmodelSelectTrainer{
  hpsEpsilons
  hpsKernels
  hpsCrange
  hpsGammaRange
  makeProbModel
  usePca
  pcaVarThres
  useSelectHeuristic
  getHpsRandomSearchSets()
  getHpsGridSearchSets()
  refineGridTrainer( hps )
}
ModelTrainers.SVMmodelSelectTrainer *-- ModelTrainers.SVMtrainer

ModelTrainers.Base <|-- ModelTrainers.SVMtrainer
class ModelTrainers.SVMtrainer{
  epsilon
  kernel
  c
  gamma
  makeProbModel
  usePca
  pcaVarThres
  buildModel( x, y )
}

ModelTrainers.HpsTrainer <|-- ModelTrainers.RFmodelSelectTrainer
class ModelTrainers.RFmodelSelectTrainer{
  hpsNtreesRange
  hpsMinLeafSizeRange
  method
  hpsNumPredictorsToSampleFunctions
  hpsInBagSamplesRange
  predictorSelection
  useSelectHeuristic
  getHpsRandomSearchSets()
  getHpsGridSearchSets()
  refineGridTrainer( hps )
}
ModelTrainers.RFmodelSelectTrainer *-- ModelTrainers.RandomForestTrainer

ModelTrainers.Base <|-- ModelTrainers.RandomForestTrainer
class ModelTrainers.RandomForestTrainer{
  nTrees
  method
  minLeafSize
  numPredictorsToSample
  inBagSamples
  predictorSelection
  buildModel( x, y )
}


abstract class PerformanceMeasures.Base{
  performance
  datapointInfo
  Base( yTrue, yPred, iw, datapointInfo, testSetIdData )
  ...
  strapOffDpi()
  getBacfDpi( bacfIdx, bacfSubidx )
  makeDatapointInfoStats( fieldname, compiledPerfField )
  {abstract} calcPerformance( yTrue, yPred, iw, dpi, testSetIdData )
  {abstract} eqPm( other )
  {abstract} gtPm( other )
  {abstract} char()
  {abstract} double()
}

PerformanceMeasures.Base <|-- PerformanceMeasures.BAC
class PerformanceMeasures.BAC{
  tp
  fp
  tn
  fn
  sensitivity
  specificity
  acc
  BAC( yTrue, yPred, datapointInfo )
  epPm( other ) 
  gtPm( other )
  double()
  char()
  calcPerformance( yTrue, yPred, iw, dpi )
}

PerformanceMeasures.BAC <|-- PerformanceMeasures.BAC2
class PerformanceMeasures.BAC2{
  bac
  BAC2( yTrue, yPred, varargin )
  epPm( other ) 
  gtPm( other )
  double()
  char()
  calcPerformance( yTrue, yPred, iw, dpi )
}

PerformanceMeasures.Base <|-- PerformanceMeasures.ImportanceWeightedSquareBalancedAccuracy
class PerformanceMeasures.ImportanceWeightedSquareBalancedAccuracy{
  tp
  fp
  tn
  fn
  sensitivity
  specificity
  acc
  bac
  ImportanceWeightedSquareBalancedAccuracy( yTrue, yPred, varargin )
  epPm( other ) 
  gtPm( other )
  double()
  char()
  calcPerformance( yTrue, yPred, iw, dpi )
}

PerformanceMeasures.Base <|-- PerformanceMeasures.BAC_BAextended
class PerformanceMeasures.BAC_BAextended{
  tp
  fp
  tn
  fn
  sensitivity
  specificity
  acc
  BAC_BAextended( yTrue, yPred, varargin )
  strapOffDpi()
  epPm( other ) 
  gtPm( other )
  double()
  char()
  calcPerformance( yTrue, yPred, ~, dpi, testSetIdData )
}
PerformanceMeasures.BAC_BAextended *-- "resc_b (1), resc_t (1), resc_t2 (1)" RescSparse

PerformanceMeasures.Base <|-- PerformanceMeasures.Fscore
class PerformanceMeasures.Fscore{
  tp
  fp
  tn
  fn
  recall
  precision
  acc
  Fscore( yTrue, yPred, varargin )
  epPm( other ) 
  gtPm( other )
  double()
  char()
  calcPerformance( yTrue, yPred, iw, dpi )
}

PerformanceMeasures.Base <|-- PerformanceMeasures.MultinomialBAC
class PerformanceMeasures.MultinomialBAC{
  confusionMatrix
  sens
  acc
  MultinomialBAC( yTrue, yPred, varargin )
  epPm( other ) 
  gtPm( other )
  double()
  char()
  calcPerformance( yTrue, yPred, iw, dpi )
}

PerformanceMeasures.Base <|-- PerformanceMeasures.NSE
class PerformanceMeasures.NSE{
  mae
  NSE( yTrue, yPred, varargin )
  epPm( other ) 
  gtPm( other )
  double()
  char()
  calcPerformance( yTrue, yPred, iw, dpi )
  getConfusionMatrix( ypRange )
}


abstract class DataSelectors.Base{
  data
  connectData( data )
  {abstract} getDataSelection( sampleIdsIn, maxDataSize )
}

DataSelectors.Base <|-- DataSelectors.IgnorantSelector
class DataSelectors.IgnorantSelector{
  getDataSelection( sampleIdsIn, maxDataSize )
}

DataSelectors.Base <|-- DataSelectors.BAC_Selector
class DataSelectors.BAC_Selector{
  getDataSelection( sampleIdsIn, maxDataSize )
  {static} getBalThrowoutIdxs( y, maxDataSize )
}

DataSelectors.Base <|-- DataSelectors.BAC_NPP_NS_Selector
class DataSelectors.BAC_NPP_NS_Selector{
  discardNsNotNa
  subsampleToSmallestClass
  getDataSelection( sampleIdsIn, maxDataSize )
}


abstract class ImportanceWeighters.Base{
  data
  connectData( data )
  {abstract} getImportanceWeights( sampleIds )
}

ImportanceWeighters.Base <|-- ImportanceWeighters.IgnorantWeighter
class ImportanceWeighters.IgnorantWeighter{
  getImportanceWeights( sampleIds )
}

ImportanceWeighters.Base <|-- ImportanceWeighters.BAC_Weighter
class ImportanceWeighters.BAC_Weighter{
  labelWeights
  getImportanceWeights( sampleIds )
}

ImportanceWeighters.Base <|-- ImportanceWeighters.BAC_NS_NPP_Weighter
class ImportanceWeighters.BAC_NS_NPP_Weighter{
  getImportanceWeights( sampleIds )
}


class RescSparse{
  dataConvert
  dataIdxsConvert
  data
  dataIdxs
  id
  dataInitialize
  dataAdd
  get( idxs )
  getRowIndexed( rowIdxs )
  getRowIdxs( idxsMask )
  deleteData( rowIdxs )
  filter( varargin )
  addData( idxs, data, areIdxsPresorted )
  rowSearch( idxs, preRowIdxGt )
  partJoin( otherObj, keepMask, overrideMask )
  summarizeDown( keepDims, rowIdxs, idxReplaceMask, fun, sdoPrior, intraGroupNorm )
  meanDown( keepDims, rowIdxs, sdoPrior, intraGroupNorm )
  resample( depIdx, rIdx, resample_weights, conditions )
  idxDistribution( depIdx, defIdx )
  combineFun( fun, cdim, argIdxs, cidx, newDataType, sdo )
  resc2mat( ridx2midx, rowIdxs, sdo )
}