classdef FeatureSet5RawRmAms2Ild < FeatureCreators.Base
% 

    %% --------------------------------------------------------------------
    properties (SetAccess = private)
        ams_fb_nChannels;  % no. of frequency bins for amsFeatures
        ams_nFilters;      % no. of modulation frequencies
        rm_fb_nChannels;   % no. of frequency bins for rate maps
        ild_fb_nChannels;
    end
    
    %% --------------------------------------------------------------------
    methods (Static)
    end
    
    %% --------------------------------------------------------------------
    methods (Access = public)
        
        function obj = FeatureSet5RawRmAms2Ild( )
            obj = obj@FeatureCreators.Base();
            obj.ams_fb_nChannels = 16;
            obj.ams_nFilters = 8;
            obj.rm_fb_nChannels = 32;
            obj.ild_fb_nChannels = 32;
        end
        %% ----------------------------------------------------------------

        function afeRequests = getAFErequests( obj )
            commonParams = FeatureCreators.LCDFeatureSet.getCommonAFEParams();
            afeRequests{1}.name = 'amsFeatures';
            afeRequests{1}.params = genParStruct( ...
                commonParams{:}, ...
                'fb_nChannels', obj.ams_fb_nChannels, ...
                'ams_fbType', 'log', ...
                'ams_nFilters', obj.ams_nFilters, ...
                'ams_lowFreqHz', 2, ...
                'ams_highFreqHz', 256', ...
                'ams_wSizeSec', 128e-3, ...
                'ams_hSizeSec', 32e-3 ...
                );
            afeRequests{2}.name = 'ratemap';
            afeRequests{2}.params = genParStruct( ...
                commonParams{:}, ...
                'fb_nChannels', obj.rm_fb_nChannels ...
                );
            afeRequests{3}.name = 'ild'; % same as dnnLocKs
            afeRequests{3}.params = genParStruct(...
                commonParams{:}, ...
                'fb_nChannels', obj.ild_fb_nChannels ...
                );
        end
        %% ----------------------------------------------------------------

        function x = constructVector( obj )
            % afeIdx 2: ratemap
            % first the left, then the right channel
            rmL = obj.makeBlockFromAfe( 2, 1, ...
                @(a)(compressAndScale( a.Data, 0.33, @(x)(median( x(x>0.01) )), 0 )), ...
                {@(a)(a.Name),@(a)([num2str(numel(a.cfHz)) '-ch']),@(a)(a.Channel)}, ...
                {@(a)(strcat('t', arrayfun(@(t)(num2str(t)),1:size(a.Data,1),'UniformOutput',false)))}, ...
                {@(a)(strcat('f', arrayfun(@(f)(num2str(f)),a.cfHz,'UniformOutput',false)))} );
            x = obj.reshape2featVec( rmL );
            rmR = obj.makeBlockFromAfe( 2, 2, ...
                @(a)(compressAndScale( a.Data, 0.33, @(x)(median( x(x>0.01) )), 0 )), ...
                {@(a)(a.Name),@(a)([num2str(numel(a.cfHz)) '-ch']),@(a)(a.Channel)},...
                {@(a)(strcat('t', arrayfun(@(t)(num2str(t)),1:size(a.Data,1),'UniformOutput',false)))},...
                {@(a)(strcat('f', arrayfun(@(f)(num2str(f)),a.cfHz,'UniformOutput',false)))} );
            x = obj.concatFeats( x, obj.reshape2featVec( rmR ) );
            % afeIdx 1: amsFeatures and generate corresponding feature names
            % first the left, then the right channel
            modL = obj.makeBlockFromAfe( 1, 1, ...
                @(a)(compressAndScale( a.Data, 0.33 )), ...
                {@(a)(a.Name),@(a)([num2str(numel(a.cfHz)) '-ch']),@(a)(a.Channel)}, ...
                {@(a)(strcat('t', arrayfun(@(t)(num2str(t)),1:size(a.Data,1),'UniformOutput',false)))}, ...
                {@(a)(strcat('f', arrayfun(@(f)(num2str(f)),a.cfHz,'UniformOutput',false)))},...
                {@(a)(strcat('mf', arrayfun(@(f)(num2str(f)),a.modCfHz,'UniformOutput',false)))} );
            mod = obj.reshapeBlock( modL, 1 );
            x = obj.concatFeats( x, obj.reshape2featVec( mod ) );
            modR = obj.makeBlockFromAfe( 1, 2, ...
                @(a)(compressAndScale( a.Data, 0.33 )), ...
                {@(a)(a.Name),@(a)([num2str(numel(a.cfHz)) '-ch']),@(a)(a.Channel)}, ...
                {@(a)(strcat('t', arrayfun(@(t)(num2str(t)),1:size(a.Data,1),'UniformOutput',false)))}, ...
                {@(a)(strcat('f', arrayfun(@(f)(num2str(f)),a.cfHz,'UniformOutput',false)))},...
                {@(a)(strcat('mf', arrayfun(@(f)(num2str(f)),a.modCfHz,'UniformOutput',false)))} );
            mod = obj.reshapeBlock( modR, 1 );
            x = obj.concatFeats( x, obj.reshape2featVec( mod ) );
            % afeIdx 3: ild
            ild = obj.makeBlockFromAfe( 3, 1, ...
                @(a)(compressAndScale( a.Data, 0.33 )), ...
                {@(a)(a.Name),@(a)([num2str(numel(a.cfHz)) '-ch']),@(a)(a.Channel)}, ...
                {@(a)(strcat('t', arrayfun(@(t)(num2str(t)),1:size(a.Data,1),'UniformOutput',false)))}, ...
                {@(a)(strcat('f', arrayfun(@(f)(num2str(f)),a.cfHz,'UniformOutput',false)))} );
            x = obj.concatFeats( x, obj.reshape2featVec( ild ) );
        end
        %% ----------------------------------------------------------------
        
        function outputDeps = getFeatureInternOutputDependencies( obj )
        
            outputDeps.ams_fb_nChannels = obj.ams_fb_nChannels;
            outputDeps.ams_nFilters = obj.ams_nFilters;
            outputDeps.rm_fb_nChannels = obj.rm_fb_nChannels;
            outputDeps.ild_fb_nChannels = obj.ild_fb_nChannels;
            classInfo = metaclass( obj );
            [classname1, classname2] = strtok( classInfo.Name, '.' );
            if isempty( classname2 ), outputDeps.featureProc = classname1;
            else outputDeps.featureProc = classname2(2:end); end
            outputDeps.v = 4;
        end
        %% ----------------------------------------------------------------
        
    end
    
    %% --------------------------------------------------------------------
    methods (Access = protected)
    end
    
end

