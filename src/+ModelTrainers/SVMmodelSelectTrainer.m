classdef SVMmodelSelectTrainer < ModelTrainers.HpsTrainer & Parameterized
    
    %% -----------------------------------------------------------------------------------
    properties (SetAccess = {?Parameterized})
        hpsEpsilons;
        hpsKernels;
        hpsCrange;
        hpsGammaRange;
        makeProbModel;
        usePca;
        pcaVarThres;
        useSelectHeuristic;
    end
    
    %% -----------------------------------------------------------------------------------
    methods

        function obj = SVMmodelSelectTrainer( varargin )
            pds{1} = struct( 'name', 'hpsEpsilons', ...
                             'default', 0.001, ...
                             'valFun', @(x)(isfloat(x) && all( x > 0 )) );
            pds{2} = struct( 'name', 'hpsKernels', ...
                             'default', 0, ...
                             'valFun', @(x)(rem(x,1) == 0 && all(x == 0 | x == 2)) );
            pds{3} = struct( 'name', 'hpsCrange', ...
                             'default', [-6 2], ...
                             'valFun', @(x)(isfloat(x) && length(x)==2 && x(1) < x(2)) );
            pds{4} = struct( 'name', 'hpsGammaRange', ...
                             'default', [-12 3], ...
                             'valFun', @(x)(isfloat(x) && length(x)==2 && x(1) < x(2)) );
            pds{5} = struct( 'name', 'makeProbModel', ...
                             'default', false, ...
                             'valFun', @islogical );
            pds{6} = struct( 'name', 'usePca', ...
                             'default', false, ...
                             'valFun', @islogical );
            pds{7} = struct( 'name', 'pcaVarThres', ...
                             'default', 0.99, ...
                             'valFun', @(x)(isfloat(x) && x > 0 && x <= 1) );
            pds{8} = struct( 'name', 'useSelectHeuristic', ...
                             'default', false, ...
                             'valFun', @islogical );
            obj = obj@Parameterized( pds );
            obj = obj@ModelTrainers.HpsTrainer( varargin{:} );
            obj.setParameters( true, ...
                'buildCoreTrainer', @ModelTrainers.SVMtrainer, ...
                'hpsCoreTrainerParams', ...
                    {'makeProbModel', false,...
                     'usePca', obj.usePca, 'pcaVarThres', obj.pcaVarThres, ...
                     'dataSelector',obj.dataSelector, ...
                     'importanceWeighter',obj.importanceWeighter}, ...
                varargin{:} );
            obj.setParameters( false, 'finalCoreTrainerParams', ...
                                      {'makeProbModel', obj.makeProbModel,...
                                       'usePca', obj.usePca, ...
                                       'pcaVarThres', obj.pcaVarThres, ...
                                       'dataSelector',obj.dataSelector,...
                                       'importanceWeighter',obj.importanceWeighter} );
        end
        %% -------------------------------------------------------------------------------

    end
    
    %% -----------------------------------------------------------------------------------
    methods (Access = protected)
        
        function hpsSets = getHpsRandomSearchSets( obj )
            hpsSets = zeros( 0, 4 );
            while size( hpsSets, 1 ) < obj.hpsSearchBudget(1)
                hpsCs = rand( 1 );
                hpsGs = rand( 1 );
                hpsEs = obj.hpsEpsilons(randi( numel( obj.hpsEpsilons ) ));
                hpsKs = obj.hpsKernels(randi( numel( obj.hpsKernels ) ));
                hpsSets(end+1,:) = cat( 2, hpsKs, hpsEs, hpsCs, hpsGs ); %#ok<AGROW>
                hpsSets = uniquetol( hpsSets, 0.05, 'ByRows', true );
            end
            hpsSets(:,3) = 10.^( (obj.hpsCrange(2) - obj.hpsCrange(1)) ...
                                                      * hpsSets(:,3) + obj.hpsCrange(1) );
            hpsSets(:,4) = 10.^( (obj.hpsGammaRange(2) - obj.hpsGammaRange(1)) ...
                                                  * hpsSets(:,4) + obj.hpsGammaRange(1) );
            hpsSets = hpsSets(randperm( size( hpsSets, 1 ) ),:);
            hpsSets = cell2struct( num2cell(hpsSets), {'kernel','epsilon','c','gamma'},2 );
        end
        %% -------------------------------------------------------------------------------
        
        function hpsSets = getHpsGridSearchSets( obj )
            hpsCs = logspace( obj.hpsCrange(1), ...
                              obj.hpsCrange(2), ...
                              obj.hpsSearchBudget(1) );
            hpsGs = logspace( obj.hpsGammaRange(1), ...
                              obj.hpsGammaRange(2), ...
                              obj.hpsSearchBudget(1) );
            [kGrid, eGrid, cGrid, gGrid] = ndgrid( ...
                                                obj.hpsKernels, ...
                                                obj.hpsEpsilons, ...
                                                hpsCs, ...
                                                hpsGs );
            hpsSets = [kGrid(:), eGrid(:), cGrid(:), gGrid(:)];
            hpsSets(hpsSets(:,1)~=2,4) = 1; %set gamma equal for kernels other than rbf
            hpsSets = unique( hpsSets, 'rows' );
            hpsSets = hpsSets(randperm( size( hpsSets, 1 ) ),:);
            hpsSets = cell2struct( num2cell(hpsSets), {'kernel','epsilon','c','gamma'},2 );
        end
        %% -------------------------------------------------------------------------------
        
        function refineGridTrainer( obj, hps )
            numBests = ceil( obj.hpsSearchBudget(1) / 2 );
            bestParamSets = hps.params(end-numBests+1:end);
            cRefinedRange = [floor( log10( min( [bestParamSets.c] ) ) ), ...
                             ceil( log10( max( [bestParamSets.c] ) ) )];
            gRefinedRange = [floor( log10( min( [bestParamSets.gamma] ) ) ), ...
                             ceil( log10( max( [bestParamSets.gamma] ) ) )];
            eRefinedRange = unique( [bestParamSets.epsilon] );
            kRefinedRange = unique( [bestParamSets.kernel] );
            obj.setParameters( false, ...
                'hpsGammaRange', gRefinedRange, ...
                'hpsCrange', cRefinedRange, ...
                'hpsEpsilons', eRefinedRange, ...
                'hpsKernels', kRefinedRange );
        end
        %% -------------------------------------------------------------------------------

        % override
        function hpsAddInfo = getHpsAddInfo( obj )
            nsv = cellfun( @(c)(c.model.totalSV), obj.hpsCVtrainer.models );
            xsizes = cellfun( @(c)(size( c.x, 1 )), obj.hpsCVtrainer.folds );
            xsize = min( arrayfun( @(a)(sum( xsizes ) - a), xsizes ), ...
                         obj.hpsMaxDataSize(1) );
            hpsAddInfo.nsvRatio = mean( nsv(:) ./ xsize(:) );
        end
        %% -------------------------------------------------------------------------------

        % override
        function hps = sortHpsSetsByPerformance( obj, hps )
            hps = sortHpsSetsByPerformance@ModelTrainers.HpsTrainer( obj, hps );
            if obj.useSelectHeuristic
                s = hps.stds;
                r = [hps.addInfo.nsvRatio];
                rPenalty = s .* r;
                for ii = 1 : numel( hps.perfs )
                    p(ii) = hps.perfs(ii) - rPenalty(ii); %#ok<AGROW>
                end
                [~,idx] = sort( p );
                hps.perfs = hps.perfs(idx);
                hps.stds = hps.stds(idx);
                hps.dataSizes = hps.dataSizes(idx);
                hps.testDataSizes = hps.testDataSizes(idx);
                hps.params = hps.params(idx);
                hps.addInfo = hps.addInfo(idx);
            end
        end
        %% -------------------------------------------------------------------------------
        
        function refinedHpsTrainer = refineGridTrainerLegacy( obj, hps )
            refinedHpsTrainer = ModelTrainers.SVMmodelSelectTrainer( ...
                                                       'hpsKernels', obj.hpsKernels, ...
                                                       'makeProbModel', obj.makeProbModel, ...
                                                       'buildCoreTrainer', obj.buildCoreTrainer, ...
                                                       'hpsCoreTrainerParams', obj.hpsCoreTrainerParams, ...
                                                       'finalCoreTrainerParams', obj.finalCoreTrainerParams, ...
                                                       'hpsMaxDataSize', obj.hpsMaxDataSize, ...
                                                       'hpsRefineStages', obj.hpsRefineStages, ...
                                                       'hpsSearchBudget', obj.hpsSearchBudget, ...
                                                       'hpsCvFolds', obj.hpsCvFolds, ...
                                                       'hpsMethod', obj.hpsMethod, ...
                                                       'performanceMeasure', obj.performanceMeasure );
            best3LogMean = @(fn)(mean( log10( [hps.params(end-2:end).(fn)] ) ));
            eRefinedRange = getCenteredHalfRange( ...
                log10(obj.hpsEpsilons), best3LogMean('epsilon') );
            cRefinedRange = getCenteredHalfRange( ...
                obj.hpsCrange, best3LogMean('c') );
            gRefinedRange = getCenteredHalfRange( ...
                obj.hpsGammaRange, best3LogMean('gamma') );
            refinedHpsTrainer.setParameters( false, ...
                'hpsGammaRange', gRefinedRange, ...
                'hpsCrange', cRefinedRange, ...
                'hpsEpsilons', unique( 10.^[eRefinedRange, best3LogMean('epsilon')] ) );
        end
        %% -------------------------------------------------------------------------------
        
    end

    %% -----------------------------------------------------------------------------------
    methods (Access = private)
        
    end
    
end