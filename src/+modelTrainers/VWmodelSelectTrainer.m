classdef VWmodelSelectTrainer < modelTrainers.HpsTrainer & Parameterized

    %% -----------------------------------------------------------------------------------
    properties (SetAccess = {?Parameterized})
        passes;
        lossFunction;
        hpsLearningRateRange;
        learningRateDecay;
        lambda1;
        lambda2;
        initialT;
        powerT;
        noconstant;
        binary;
    end
    
    %% -----------------------------------------------------------------------------------
    methods

        function obj = VWmodelSelectTrainer( varargin )
            pds{1} = struct( 'name', 'passes', ...
                             'default', 1, ...
                             'valFun', @(x)(isfloat(x) && x > 0) );
            pds{2} = struct( 'name', 'lossFunction', ...
                             'default', 'logistic', ...
                             'valFun', @(x)(strcmpi(x,'squared') || strcmpi(x,'hinge') ...
                             	|| strcmpi(x,'logistic') || strcmpi(x,'quantile') || strcmpi(x,'poisson')) );
            pds{3} = struct( 'name', 'hpsLearningRateRange', ...
                             'default', [0 25], ...
                             'valFun', @(x)(isfloat(x) && length(x)==2 && x(1) < x(2)) );
            pds{4} = struct( 'name', 'learningRateDecay', ...
                             'default', 1, ...
                             'valFun', @(x)(isfloat(x) && x >= 0) );
            pds{5} = struct( 'name', 'lambda1', ...
                             'default', 0, ...
                             'valFun', @(x)(isfloat(x) && x >= 0) );
            pds{6} = struct( 'name', 'lambda2', ...
                             'default', 0, ...
                             'valFun', @(x)(isfloat(x) && x >= 0) );
            pds{7} = struct( 'name', 'initialT', ...
                             'default', 0, ...
                             'valFun', @(x)(isfloat(x) && x >= 0) );
            pds{8} = struct( 'name', 'powerT', ...
                             'default', 0.5, ...
                             'valFun', @(x)(isfloat(x) && x >= 0) );
            pds{9} = struct( 'name', 'noconstant', ...
                             'default', false, ...
                             'valFun', @islogical );
            pds{10} = struct( 'name', 'binary', ...
                             'default', true, ...
                             'valFun', @islogical );
            obj = obj@Parameterized( pds );
            obj = obj@modelTrainers.HpsTrainer( varargin{:} );
            obj.setParameters( true, ...
                'buildCoreTrainer', @modelTrainers.VWtrainer, ...
                'hpsCoreTrainerParams', {
                	'passes', 3, ...
                	'lossFunction', 'logistic', ...
                	'learningRateDecay', 1, ...
                	'lambda1', 0, ...
                	'lambda2', 0, ...
                	'initialT', 0, ...
                	'powerT', 0.5, ...
                	'noconstant', false, ...
                	'binary', true}, ...
                varargin{:} );
            obj.setParameters( false, ...
                'finalCoreTrainerParams', ...
                    {'passes', obj.passes, ...
                     'lossFunction', obj.lossFunction, ...
                     'learningRateDecay', obj.learningRateDecay, ...
                     'lambda1', obj.lambda1, ...
                     'lambda2', obj.lambda2, ...
                     'initialT', obj.initialT, ...
                     'powerT', obj.powerT, ...
                     'noconstant', obj.noconstant, ...
                     'binary', obj.binary} );
        end
        %% -------------------------------------------------------------------------------

    end
    
    %% -----------------------------------------------------------------------------------
    methods (Access = protected)
        
        function hpsSets = getHpsGridSearchSets( obj )
        	hpsLearningRates = linspace( obj.hpsLearningRateRange(1), ...
                                  obj.hpsLearningRateRange(2), ...
                                  obj.hpsSearchBudget );
            [lrGrid] = ndgrid( hpsLearningRates );
            hpsSets = [lrGrid(:)];
            %hpsSets(hpsSets(:,1)~=2,4) = 1; %set gamma equal for kernels other than rbf
            hpsSets = unique( hpsSets, 'rows' );
            hpsSets = cell2struct( num2cell(hpsSets), {'learningRate'},2 );
        end
        %% -------------------------------------------------------------------------------
        
        function refinedHpsTrainer = refineGridTrainer( obj, hps )
            refinedHpsTrainer = modelTrainers.VWmodelSelectTrainer( ...
                                                       'passes', obj.passes, ...
                                                       'lossFunction', obj.lossFunction, ...
                                                       'learningRateDecay', obj.learningRateDecay, ...
                                                       'lambda1', obj.lambda1, ...
                                                       'lambda2', obj.lambda2, ...
                                                       'initialT', obj.initialT, ...
                                                       'powerT', obj.powerT, ...
                                                       'buildCoreTrainer', obj.buildCoreTrainer, ...
                                                       'hpsCoreTrainerParams', obj.hpsCoreTrainerParams, ...
                                                       'finalCoreTrainerParams', obj.finalCoreTrainerParams, ...
                                                       'hpsMaxDataSize', obj.hpsMaxDataSize, ...
                                                       'hpsRefineStages', obj.hpsRefineStages, ...
                                                       'hpsSearchBudget', obj.hpsSearchBudget, ...
                                                       'hpsCvFolds', obj.hpsCvFolds, ...
                                                       'hpsMethod', obj.hpsMethod, ...
                                                       'performanceMeasure', obj.performanceMeasure );
            best3LogMean = @(fn)(mean( log10( [hps.params(end-2:end).(fn)] ) ));
            lrRefinedRange = getCenteredHalfRange( ...
                obj.hpsLearningRateRange, best3LogMean('learningRate') );
            refinedHpsTrainer.setParameters( false, ...
                'hpsLearningRateRange', lrRefinedRange  );
        end
        %% -------------------------------------------------------------------------------
        
    end

    %% -----------------------------------------------------------------------------------
    methods (Access = private)
        
    end
    
end
