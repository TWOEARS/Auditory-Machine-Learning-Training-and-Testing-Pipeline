@startuml

set namespaceSeparator none


class TwoEarsIdTrainPipe{
  init( sceneCfgs, hrir )
  setTrainset( newTrainFlists )
  setTestset( newTestFlists )
  setupData()
}
TwoEarsIdTrainPipe o-- "pipeline (1)" Core.IdentificationTrainingPipeline: sets up >
TwoEarsIdTrainPipe ..> DataProcs.MultiSceneCfgsIdProcWrapper: sets scene configuration(s)


class Core.IdentificationTrainingPipeline{
  cacheDirectoryDirSuppl
  cddsUseIdxs
  addModelCreator( trainer )
  resetDataProcs( pipeReUseIdx )
  addDataPipeProc( idProc )
  setTrainData( trainData )
  setTestData( testData )
  run( modelname )
}
Core.IdentificationTrainingPipeline o-- "data (1)" Core.IdentTrainPipeData
Core.IdentificationTrainingPipeline *-- "dataPipeProcs (*)" Core.DataPipeProc: runs cascade
Core.IdentificationTrainingPipeline o-- "trainer (1)" ModelTrainers.Base: runs


class Core.DataPipeProc{
  connectToOutputFrom( outputtingProc )
  connectData( data )
  checkDataFiles()
  run()
}
Core.DataPipeProc o-- "dataFileProcessor (1)" Core.IdProcInterface: executes for each file
Core.DataPipeProc o-- Core.IdentTrainPipeData


class Core.IdCacheDirectory{
  treeRoot
  getCacheDirName()
  setCacheTopDir( topDir )
  getCacheFilepath( cfg, createIfnExist )
  suspend()
  loadCacheDirectory()
  saveCacheDirectory()
  maintenance()
  {static} standaloneMaintain( cacheTopDir, deleteEmpties, filename )
  {static} cacheDuplicateRemove( dir1, dir2 )
}


class Core.IdentTrainPipeData{
  stratificationLabels
  autoStratify
  subsref()
  subsasgn()
  length()
  autoSetStratificationLabels()
  splitInPermutedStratifiedFolds( nFolds, stratifyLabels )
  getDisjunctSubsetIdxs( labels )
  getFilesLabeled( label, labelValue )
  getMinDisjunctSubsetsSize( labels )
  getShare( ratio, stratifyLabels )
  getFileIdx( fileNames )
  saveDataFList( flistName, baseDir )
  loadFileList( flistName, checkFileExistence )
  clear( mode )
  {static} combineData( varargin )
}
Core.IdentTrainPipeData *-- "data (*)" Core.IdentTrainPipeDataElem
Core.IdentTrainPipeData o-- "folds (*)" Core.IdentTrainPipeData


class Core.IdentTrainPipeDataElem{
  fileName
  x
  y
  ysi
  bIdxs
  bacfIdxs
  blockAnnotsCacheFile
  blockAnnotations
  fileAnnotations
  containedIn
  setFileName( fileName )
  addContainers( containers )
  getFileAnnotation( aLabel )
  clear()
  readFileAnnotations()
  {static} addPPtoBas( bas, y )
}


abstract class Core.IdProcInterface{
  procCacheFolderNames
  sceneId
  foldId
  saveImmediately
  setLoadSemaphore
  init()
  saveCacheDirectory()
  loadCacheDirectory()
  connectIdData( idData )
  hasFileAlreadyBeenProcessed( wavFilepath )
  getOutputFilepath( wavFilepath )
  loadProcessedData( wavFilepath, varargin )
  loadInputData( wavFilepath, varargin )
  processSaveAndGetOutput( wavFilepath )
  save( savFilepath, out )
  saveOutput( wavFilepath )
  getOutputDependencies()
  ..
  {abstract} process( wavFilepath )
  {abstract} getInternOutputDependencies()
  {abstract} getOutput( varargin )
}
Core.IdProcInterface o-up- "inputProc (1)" Core.IdProcInterface
Core.IdProcInterface *-up- "cacheDirectory (1)" Core.IdCacheDirectory
Core.IdProcInterface o-up- "idData (1)" Core.IdentTrainPipeData


Core.IdProcInterface <|-- DataProcs.AuditoryFEmodule
class DataProcs.AuditoryFEmodule{
  managerObject
  dataObject
  afeParams
  process( wavFilepath)
}


Core.IdProcInterface <|-- DataProcs.GatherFeaturesProc
class DataProcs.GatherFeaturesProc{
  sceneCfgDataUseRatio
  sceneCfgPrioDataUseRatio
  selectPrioClass
  prioClass
  dataConverter
  loadBlockAnnotations
  process( wavFilepath)
}
DataProcs.GatherFeaturesProc o-- "dataSelector (1)" DataSelectors.Base
DataProcs.GatherFeaturesProc ..> Core.IdentTrainPipeData: loads feature vectors and labels


Core.IdProcInterface <|-- DataProcs.IdProcWrapper
class DataProcs.IdProcWrapper{
  process( wavFilepath)
}
DataProcs.IdProcWrapper o-- "wrappedProcs (*)" Core.IdProcInterface


Core.IdProcInterface <|-- DataProcs.IdSimConvRoomWrapper
class DataProcs.IdSimConvRoomWrapper{
  convRoomSim
  reverberationMaxOrder
  IRDataset
  earSout
  annotsOut
  outFs
  getDataFs()
  process( wavFilepath)
}
DataProcs.IdSimConvRoomWrapper o-- "sceneConfig (1)" SceneConfig.SceneConfiguration


DataProcs.IdProcWrapper <|-- DataProcs.MultiSceneCfgsIdProcWrapper
class DataProcs.MultiSceneCfgsIdProcWrapper{
  wavFoldsAssignment
  setSceneConfig( multiSceneCfgs )
  getCurrentFoldId( wavFilepath )
  getCurrentFoldSceneConfig( ii, foldId )
  hasFileAlreadyBeenProcessed( wavFilepath )
  processSaveAndGetOutput( wavFilepath )
  process( wavFilepath)
}
DataProcs.MultiSceneCfgsIdProcWrapper o-- "sceneProc (1)" DataProcs.SceneEarSignalProc
DataProcs.MultiSceneCfgsIdProcWrapper o-- "sceneConfigurations (*)" SceneConfig.SceneConfiguration


DataProcs.IdProcWrapper <|-- DataProcs.ParallelRequestsAFEmodule
class DataProcs.ParallelRequestsAFEmodule{
  fs
  afeRequests
  process( wavFilepath)
}
DataProcs.ParallelRequestsAFEmodule *-- "individualAfeProcs (*)" DataProcs.AuditoryFEmodule
DataProcs.ParallelRequestsAFEmodule ..> BlockCreators.Base: usual dataflow >

DataProcs.IdProcWrapper <|-- DataProcs.SceneEarSignalProc
class DataProcs.SceneEarSignalProc{
  earSout
  annotsOut
  classesOnMultipleSourcesFilter
  getDatafs()
  process( wavFilepath)
  annotateNrj( signal, nrjAnnots, signalId, annotsName, returnDb, q )
  {static} adjustSNR( fs, signal1, sig1OnOffs, signal2, snrdB )
  {static} runningEnergy( fs, signal, blockSec, stepSec )
  {static} detectActivity( fs, signal, thresdB, hSec, blockSec, stepSec )
}
DataProcs.SceneEarSignalProc o-- "sceneConfig (1)" SceneConfig.SceneConfiguration
DataProcs.SceneEarSignalProc o-- "binauralSim (1)" DataProcs.IdSimConvRoomWrapper
DataProcs.SceneEarSignalProc ..> DataProcs.ParallelRequestsAFEmodule: usual dataflow >


Core.IdProcInterface <|-- BlockCreators.Base
abstract class BlockCreators.Base{
  shiftSize_s
  blockSize_s
  process( wavFilepath )
  cutDataBlock( afeData, backOffset_s )
  ..
  {abstract} getBlockCreatorOutputDependencies()
  {abstract} blockify( afeStream, streamAnnotations )
}
BlockCreators.Base ..> FeatureCreators.Base: usual dataflow >
BlockCreators.Base ..> DataProcs.BlackboardKsWrapper: alternative dataflow >


Core.IdProcInterface <|-- LabelCreators.Base
abstract class LabelCreators.Base{
  labelBlockSize_s
  labelBlockSize_auto
  removeUnclearBlocks
  process( wavFilepath )
  ..
  {abstract} getLabelInternOutputDependencies()
  {abstract} label( annotations )
}
LabelCreators.Base ..> DataProcs.GatherFeaturesProc: usual dataflow >


Core.IdProcInterface <|-- DataProcs.BlackboardKsWrapper
abstract class DataProcs.BlackboardKsWrapper{
  kss
  bbs
  afeDataIndexOffset
  out
  getAFErequests()
  process( wavFilepath )
  ..
  {abstract} getKsInternOutputDependencies()
  {abstract} preproc()
  {abstract} postproc( afeData, blockAnnotations )
}
DataProcs.BlackboardKsWrapper ..> FeatureCreators.Base: alternative dataflow >

DataProcs.BlackboardKsWrapper <|-- DataProcs.SegmentKsWrapper
class DataProcs.SegmentKsWrapper{
  varAzmSigma
  segSrcAssignmentMethod
  useDnnLocKs
  useNsrcsKs
  nsrcsBias
  nsrcsRndPlusMinusBias
  srcSegregateNrjThreshold
  getKsInternOutputDependencies()
  preproc( blockAnnotations )
  postproc( afeData, blockAnnotations )
  maskBA( blockAnnotations, srcIdxs )
}


Core.IdProcInterface <|-- FeatureCreators.Base
abstract class FeatureCreators.Base{
  description
  setAfeData( afeData )
  process( wavFilepath )
  ..
  {abstract} getAFErequests()
  {abstract} getFeatureInternOutputDependencies()
  {abstract} constructVector()
}
FeatureCreators.Base ..> LabelCreators.Base: usual dataflow >


abstract class Models.Base{
  featureMask
  trainTime
  testTime
  {static} verbose
  applyModel( x )
  ..
  {abstract} applyModelMasked( x )
  ..
  {static} getPerformance( model, testSet, perfMeasure, maxDataSize, dataSelector, importanceWeighter, getDatapointInfo )
}
Models.Base ..> PerformanceMeasures.Base: produces


abstract class ModelTrainers.Base{
  {static} balMaxData
  {static} featureMask
  maxDataSize
  maxTestDataSize
  setData( trainSet, testSet )
  getModel()
  verbose( newV )
  getPerformance( getDatapointInfo )
  run()
  getPermutedTrainingData()
  ..
  {abstract} buildModel( x, y, iw )
  {abstract} giveTrainedModel()
  {static} getSelectedData( ... )
}
ModelTrainers.Base ..> Models.Base: produces
ModelTrainers.Base o-- "performanceMeasure (1)" PerformanceMeasures.Base
ModelTrainers.Base o-- "trainSet (1), testSet (1)" Core.IdentTrainPipeData
ModelTrainers.Base o-- "dataSelector (1)" DataSelectors.Base
ModelTrainers.Base o-- "importanceWeighter (1)" ImportanceWeighters.Base

ModelTrainers.Base <|-- ModelTrainers.CVtrainer
class ModelTrainers.CVtrainer{
  {static} useParallelComputing
  models
  setNumberOfFolds( nFolds )
  run()
  buildModel()
  getPerformance()
}
ModelTrainers.CVtrainer o-- "trainer (1)" ModelTrainers.Base

ModelTrainers.Base <|-- ModelTrainers.HpsTrainer
abstract class ModelTrainers.HpsTrainer{
  hpsSets
  hpsRefineStages
  hpsSearchBudget
  hpsCvFolds
  hpsMaxDataSize
  finalMaxDataSize
  run()
  ..
  {abstract} getHpsGridSearchSets()
  {abstract} getHpsRandomSearchSets()
  {abstract} refineGridTrainer( hps )
}
ModelTrainers.HpsTrainer *-- "hpsCVtrainer (1)" ModelTrainers.CVtrainer
ModelTrainers.HpsTrainer *-- "coreTrainer (1)" ModelTrainers.Base

ModelTrainers.Base <|-- ModelTrainers.LoadModelNoopTrainer
class ModelTrainers.LoadModelNoopTrainer{
  model
  modelParams
  buildModel( x, y )
  giveTrainedModel()
}


abstract class PerformanceMeasures.Base{
  performance
  datapointInfo
  Base( yTrue, yPred, iw, datapointInfo, testSetIdData )
  ...
  strapOffDpi()
  getBacfDpi( bacfIdx, bacfSubidx )
  makeDatapointInfoStats( fieldname, compiledPerfField )
  {abstract} calcPerformance( yTrue, yPred, iw, dpi, testSetIdData )
  {abstract} eqPm( other )
  {abstract} gtPm( other )
  {abstract} char()
  {abstract} double()
}


class SceneConfig.SceneConfiguration{
  sources
  SNRs
  room
  snrRefs
  loopSrcs
  lenRefType
  lenRefArg
  minLen
  normalize
  normalizeLevel
  addSource( source, varargin )
  addRoom( room )
  setBRIRheadOrientation( brirHeadOrientIdx )
  setLengthRef( refType, refArg, varargins )
  instantiate()
  getSingleConfig( srcIdx )
  isequal( other )
}


abstract class DataSelectors.Base{
  data
  connectData( data )
  {abstract} getDataSelection( sampleIdsIn, maxDataSize )
}


abstract class ImportanceWeighters.Base{
  data
  connectData( data )
  {abstract} getImportanceWeights( sampleIds )
}


DataProcs.IdProcWrapper <|-- LabelCreators.MultiExecuteLabeler
class LabelCreators.MultiExecuteLabeler{
  process( wavFilepath)
}
LabelCreators.MultiExecuteLabeler o-- "individualLabelers (*)" LabelCreators.Base


class IdEvalFrame{
  {static} readEventClass( soundFileName )
  {static} readOnOffAnnotations( soundFileName, isAbsPath )
}
