function update_testGlmNet_azms()
    
addpath( '../..' );
startIdentificationTraining();

classes = {'alarm','baby','femaleSpeech','fire'};
featureCreators = {?featureCreators.FeatureSet1Blockmean2Ch,...
                   ?featureCreators.FeatureSet1Blockmean};
azimuths = {0,45,90,180};

if exist( 'glmnet_azms_test.mat', 'file' )
    load( 'glmnet_azms_test.mat' );
else
    return;
end

for ii = 1 : 4
for cc = 1 : numel( classes )
for fc = 1 : numel( featureCreators )
for aa = 1 : numel( azimuths )
for aatest = 1 : numel( azimuths )
    
fprintf( '.\n' );

if exist( 'modelpathes_test','var' )  &&  ...
        size(modelpathes_test,1) >= ii  &&  size(modelpathes_test,2) >= cc  &&  ...
        size(modelpathes_test,3) >= fc  &&  size(modelpathes_test,4) >= aa  &&  ...
        size(modelpathes_test,5) >= aatest  ...
        &&  isempty( modelpathes_test{ii,cc,fc,aa,aatest} )
    continue;
end
if exist( 'modelpathes_test','var' )  &&  ...
       (size(modelpathes_test,1) < ii  ||  size(modelpathes_test,2) < cc  ||  ...
        size(modelpathes_test,3) < fc  ||  size(modelpathes_test,4) < aa  ||  ...
        size(modelpathes_test,5) < aatest)
    continue;
end
if exist( 'test_performances','var' )  &&  ...
        size(test_performances,1) >= ii  &&  size(test_performances,2) >= cc  &&  ...
        size(test_performances,3) >= fc  &&  size(test_performances,4) >= aa  &&  ...
        size(test_performances,5) >= aatest  ...
        &&  ~isempty( test_performances{ii,cc,fc,aa,aatest} )
    continue;
end
    
testmodel = load( [modelpathes_test{ii,cc,fc,aa,aatest} filesep classes{cc} '.model.mat'] );

test_performances{ii,cc,fc,aa,aatest} = [testmodel.testPerfresults.performance];
cv_performances{ii,cc,fc,aa,aatest} = testmodel.model.lPerfsMean;
cv_std{ii,cc,fc,aa,aatest} = testmodel.model.lPerfsStd;
[coefIdxs_b{ii,cc,fc,aa,aatest},...
 impacts_b{ii,cc,fc,aa,aatest},...
 perf_b{ii,cc,fc,aa,aatest},...
 lambda_b{ii,cc,fc,aa,aatest},...
 nCoefs_b{ii,cc,fc,aa,aatest}] = testmodel.model.getBestLambdaCVresults();
[coefIdxs_bms{ii,cc,fc,aa,aatest},...
 impacts_bms{ii,cc,fc,aa,aatest},...
 perf_bms{ii,cc,fc,aa,aatest},...
 lambda_bms{ii,cc,fc,aa,aatest},...
 nCoefs_bms{ii,cc,fc,aa,aatest}] = testmodel.model.getBestMinStdCVresults();
[coefIdxs_hws{ii,cc,fc,aa,aatest},...
 impacts_hws{ii,cc,fc,aa,aatest},...
 perf_hws{ii,cc,fc,aa,aatest},...
 lambda_hws{ii,cc,fc,aa,aatest},...
 nCoefs_hws{ii,cc,fc,aa,aatest}] = testmodel.model.getHighestLambdaWithinStdCVresults();
lbIdx = find( testmodel.model.lambda == lambda_b );
lhwsIdx = find( testmodel.model.lambda == lambda_hws );
test_performances_b{ii,cc,fc,aa,aatest} = test_performances{ii,cc,fc,aa,aatest}(lbIdx);
test_performances_hws{ii,cc,fc,aa,aatest} = test_performances{ii,cc,fc,aa,aatest}(lhwsIdx);

end
end
save( 'glmnet_azms_test.mat', 'classes', 'featureCreators', 'azimuths', ...
    'modelpathes_test', 'test_performances', 'cv_performances', 'cv_std',...
    'coefIdxs_b', 'impacts_b', 'perf_b', 'lambda_b', 'nCoefs_b',...
    'coefIdxs_bms', 'impacts_bms', 'perf_bms', 'lambda_bms', 'nCoefs_bms',...
    'coefIdxs_hws', 'impacts_hws', 'perf_hws', 'lambda_hws', 'nCoefs_hws',...
    'test_performances_b', 'test_performances_hws' );
end
end
end

