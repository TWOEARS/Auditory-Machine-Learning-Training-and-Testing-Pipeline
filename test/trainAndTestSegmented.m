function trainAndTestSegmented( modelPath )

addPathsIfNotIncluded( cleanPathFromRelativeRefs( [pwd '/..'] ) ); 
startAMLTTP();
addPathsIfNotIncluded( {...
    cleanPathFromRelativeRefs( [pwd '/../../segmentation-training-pipeline/src'] ), ... 
    cleanPathFromRelativeRefs( [pwd '/../../segmentation-training-pipeline/external/data-hash'] ), ...
    cleanPathFromRelativeRefs( [pwd '/../../segmentation-training-pipeline/external/yaml-matlab'] ) ...
    } );
segmModelFileName = '70c4feac861e382413b4c4bfbf895695.mat';
mkdir( fullfile( db.tmp, 'learned_models', 'SegmentationKS' ) );
copyfile( ['./' segmModelFileName], ...
          fullfile( db.tmp, 'learned_models', 'SegmentationKS', segmModelFileName ), ...
          'f' );

%% train

if nargin < 1 || isempty( modelPath )
    
pipe = TwoEarsIdTrainPipe();
pipe.ksWrapper = DataProcs.SegmentKsWrapper( ...
    'SegmentationTrainerParameters5.yaml', ...
    'useDnnLocKs', false, ...
    'useNsrcsKs', false, ...
    'segSrcAssignmentMethod', 'minDistance', ...
    'varAzmSigma', 15, ...
    'nsrcsBias', 0, ...
    'nsrcsRndPlusMinusBias', 2 );
pipe.featureCreator = FeatureCreators.FeatureSet5Blockmean();
babyLabeler = LabelCreators.MultiEventTypeLabeler( 'types', {{'baby'}}, 'negOut', 'rest' );
pipe.labelCreator = babyLabeler;
pipe.modelCreator = ModelTrainers.GlmNetLambdaSelectTrainer( ...
    'performanceMeasure', @PerformanceMeasures.BAC2, ...
    'cvFolds', 4, ...
    'alpha', 0.99, 'maxDataSize', 1000 );
pipe.modelCreator.verbose( 'on' );

pipe.trainset = 'learned_models/IdentityKS/trainTestSets/NIGENS160807_miniMini_TrainSet_1.flist';
pipe.setupData();

sc(1) = SceneConfig.SceneConfiguration();
sc(1).addSource( SceneConfig.PointSource( ...
        'data', SceneConfig.FileListValGen( 'pipeInput' ), ...
        'azimuth', SceneConfig.ValGen( 'manual', -45 ) )  );
sc(1).addSource( SceneConfig.PointSource( ...
        'data', SceneConfig.FileListValGen( ...
               pipe.pipeline.trainSet('fileLabel',{{'type',{'general'}}},'fileName') ),...
        'offset', SceneConfig.ValGen( 'manual', 0 ), ...
        'azimuth', SceneConfig.ValGen( 'manual', +45 )  ),...
    'snr', SceneConfig.ValGen( 'manual', 10 ),...
    'loop', 'randomSeq' );
sc(1).addSource( SceneConfig.PointSource( ...
        'data', SceneConfig.FileListValGen( ...
               pipe.pipeline.trainSet('fileLabel',{{'type',{'general'}}},'fileName') ),...
        'offset', SceneConfig.ValGen( 'manual', 0 ), ...
        'azimuth', SceneConfig.ValGen( 'manual', +135 )  ),...
    'snr', SceneConfig.ValGen( 'manual', -10 ),...
    'loop', 'randomSeq' );
pipe.init( sc, 'fs', 16000 );

modelPath = pipe.pipeline.run( 'modelName', 'segmModel', 'modelPath', 'test_segmented' );

fprintf( ' -- Model is saved at %s -- \n\n', modelPath );

end

%% test

pipe = TwoEarsIdTrainPipe();
pipe.ksWrapper = DataProcs.SegmentKsWrapper( ...
    'SegmentationTrainerParameters5.yaml', ...
    'useDnnLocKs', false, ...
    'useNsrcsKs', false, ...
    'segSrcAssignmentMethod', 'minPermutedDistance', ...
    'varAzmSigma', 15, ...
    'nsrcsBias', 0, ...
    'nsrcsRndPlusMinusBias', 2 );
pipe.featureCreator = FeatureCreators.FeatureSet5Blockmean();
babyLabeler = LabelCreators.MultiEventTypeLabeler( 'types', {{'baby'}}, 'negOut', 'rest' );
pipe.labelCreator = babyLabeler;
pipe.modelCreator = ModelTrainers.LoadModelNoopTrainer( ...
    [pwd filesep 'test_segmented/segmModel.model.mat'], ...
    'performanceMeasure', @PerformanceMeasures.BAC );
pipe.modelCreator.verbose( 'on' );

pipe.testset = 'learned_models/IdentityKS/trainTestSets/NIGENS160807_miniMini_TestSet_1.flist';
pipe.setupData();

sc(1) = SceneConfig.SceneConfiguration();
sc(1).addSource( SceneConfig.PointSource( ...
        'data', SceneConfig.FileListValGen( 'pipeInput' ), ...
        'azimuth', SceneConfig.ValGen( 'manual', -45 ) )  );
sc(1).addSource( SceneConfig.PointSource( ...
        'data', SceneConfig.FileListValGen( ...
               pipe.pipeline.testSet('fileLabel',{{'type',{'general'}}},'fileName') ),...
        'offset', SceneConfig.ValGen( 'manual', 0 ), ...
        'azimuth', SceneConfig.ValGen( 'manual', +45 )  ),...
    'snr', SceneConfig.ValGen( 'manual', 10 ),...
    'loop', 'randomSeq' );
sc(1).addSource( SceneConfig.PointSource( ...
        'data', SceneConfig.FileListValGen( ...
               pipe.pipeline.testSet('fileLabel',{{'type',{'general'}}},'fileName') ),...
        'offset', SceneConfig.ValGen( 'manual', 0 ), ...
        'azimuth', SceneConfig.ValGen( 'manual', +135 )  ),...
    'snr', SceneConfig.ValGen( 'manual', -10 ),...
    'loop', 'randomSeq' );
pipe.init( sc, 'fs', 16000 );

[modelPath,~,testPerfresults] = ...
             pipe.pipeline.run( 'modelName', 'segmModel', 'modelPath', 'test_segmented' );

fprintf( ' -- Model is saved at %s -- \n\n', modelPath );

%% analysis

resc = int32( zeros(0) );
resct = int32( zeros(0) );
dpi = testPerfresults.datapointInfo;
    
fprintf( 'analyzing' );
for ii = 1 : numel( dpi.blockAnnotsCacheFiles )
    currentFileDpiIdxs = find( dpi.fileIdxs == ii );
    for jj = 1 : numel( dpi.blockAnnotsCacheFiles{ii} )
        currentFileBacfSubIdxs = dpi.bacfIdxs(currentFileDpiIdxs);
        currentBacfDpiIdxs = currentFileDpiIdxs(currentFileBacfSubIdxs == jj);
        currentBacfUsedIdxs = dpi.bIdxs(currentBacfDpiIdxs);
        bacfile = load( dpi.blockAnnotsCacheFiles{ii}{jj}, 'blockAnnotations');
        blockAnnotations = bacfile.blockAnnotations(currentBacfUsedIdxs);
        yp = dpi.yPred(currentBacfDpiIdxs);
        yt = dpi.yTrue(currentBacfDpiIdxs);
        [bap, asgn] = extractBAparams( blockAnnotations, yp, yt );
        bapi = arrayfun( @baParams2bapIdxs, bap );
        oneIdxs = ones( size( asgn{1} ) );
        resc = addDpiToResc( resc, asgn, 2*oneIdxs, [bapi.targetHasEnergy], [bapi.nAct], [bapi.curSnr], [bapi.curSnr_avgSelf], [bapi.azmErr], [bapi.nEstErr] );
        fprintf( '.' );
        
        [~,~,sidxs] = unique( [blockAnnotations.blockOffset] );
        for bb = 1 : max( sidxs )
            [aBAs, aCs] = aggregateBlockAnnotations( bap(sidxs == bb), yp(sidxs == bb), yt(sidxs == bb) );
            if ~exist( 'aggrBAs', 'var' )
                aggrBAs(1) = aBAs;
                asgn = aCs;
            else
                aggrBAs(end+1) = aBAs; %#ok<AGROW>
                asgn = arrayfun( @(ii)([asgn{ii},aCs{ii}]), 1:4, 'UniformOutput', false );
            end
        end
        oneIdxs = ones( size( asgn{1} ) );
        resct = addDpiToResc( resct, asgn, 2*oneIdxs, [aggrBAs.targetHasEnergy], [aggrBAs.nAct], [aggrBAs.curSnr], [aggrBAs.curSnr_avgSelf], [aggrBAs.azmErr], [aggrBAs.nEstErr] );
        clear aggrBAs;
    end
end
fprintf( '\n' );

tmp = summarizeDown( resct, [7,8] );
sens = tmp(:,1) ./ (tmp(:,1)+tmp(:,4))
spec = tmp(:,2) ./ (tmp(:,2)+tmp(:,3))

tmp = summarizeDown( resc, [7,8] );
sens = tmp(:,1) ./ (tmp(:,1)+tmp(:,4))
spec = tmp(:,2) ./ (tmp(:,2)+tmp(:,3))


end
